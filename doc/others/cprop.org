* 了解 [[https://github.com/tolitius/cprop][cprop]]

** 这是个啥?
在 github 官网的介绍中的第一句话是:
: where all configuration properties converge
看起来, 这个库的名字应该是 *configuration properties*, 明显是一个配置文件相关的库

*** 吹牛时间:
在作者介绍了这个库诞生的原因:
- 有些配置完全依赖于环境变量，每个属性对应一个变量：100个属性就意味着要导出100个环境变量。
- 有些依赖于类路径中的属性文件，这很好，但需要处理 uberjar（如 META-INF 等）相关内容。
- 有些只允许字符串值：不能使用数据结构、数字等？（我喜欢我的数据结构和 EDN 的强大功能）
- 有些不允许使用结构或层次，只能是一层简单的属性集合。
- 有些保持全局的内部配置状态，这使得应用程序的（子）模块难以拥有独立的配置。

*** 作用:
- 从 classpath 和/或 file system 中加载 EDN 配置文件
- 将其与系统属性和环境变量合并，此外还可以选择从其他来源（文件、数据库、MQTT、HTTP 等）进行合并
- 返回一个（immutable) map
- 同时不保留内部状态，这样可以在同一个应用中使用不同的配置，比如应用程序的子模块

** 使用方法
#+begin_src clojure
  (require '[cprop.core :refer [load-config]])

  (load-config)
#+end_src

*** 默认:
cprop在默认情况下, 会在以下两个位置查找配置文件
- classpath: 名为 config.edn 的资源
- file system: 通过名为 conf 的系统属性指定的路径
如果两者都存在的时候, 他们会被合并. file system源将覆盖classpath源中的同名属性

**** 问题: classpath 在哪?
按照之前的经验, 我的第一反应是执行了 ~lein classpath~, 得到如下的结果
#+begin_src shell
/Users/yoza/Documents/dev/db-utils/test
/Users/yoza/Documents/dev/db-utils/src
/Users/yoza/Documents/dev/db-utils/dev-resources
/Users/yoza/Documents/dev/db-utils/resources
/Users/yoza/Documents/dev/db-utils/target/classes
/Users/yoza/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar
/Users/yoza/.m2/repository/org/clojure/spec.alpha/0.3.218/spec.alpha-0.3.218.jar
/Users/yoza/.m2/repository/org/clojure/core.specs.alpha/0.2.62/core.specs.alpha-0.2.62.jar
/Users/yoza/.m2/repository/mount/mount/0.1.17/mount-0.1.17.jar
/Users/yoza/.m2/repository/cprop/cprop/0.1.20/cprop-0.1.20.jar
/Users/yoza/.m2/repository/nrepl/nrepl/1.0.0/nrepl-1.0.0.jar
/Users/yoza/.m2/repository/org/nrepl/incomplete/0.1.0/incomplete-0.1.0.jar
#+end_src

然后在上述classpath的目录中, 分别增加 config.edn文件, 其内容如下
#+begin_src shell
  /test/config.edn       : {:test true}
  /src/config.edn        : {:root true}
  /dev-resources         无对应目录
  /resources/config.edn  : {:resources true}
  /target/classes        无对应目录
#+end_src

得到这样的测试结果, 说明config.edn获取的配置, 为按照 classpath的加载顺序得到的第一个
#+begin_src clojure
  (require '[cprop.core :refer [load-config]])

  (load-config) ;; => {:test true}
#+end_src
